/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.finite.planetlangclient;

/**
 * 
 * @author GAMER
 */
public class WIndow extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(WIndow.class.getName());
    private ClientConnection clientConnection;
    private boolean connected = false;
    private javax.swing.JTextArea userStackArea;
    private javax.swing.JTextArea globalStackArea;
    private javax.swing.JTextArea globalMemoryArea;
    private javax.swing.JTextField commandField;
    private javax.swing.JComboBox<String> executionModeCombo;
    private javax.swing.Timer updateTimer;
    private javax.swing.JTextPane chatArea;
    private javax.swing.JTextField chatInputField;
    private javax.swing.JTextArea codeEditor;
    private javax.swing.JButton executeLocalButton;
    private javax.swing.JButton executeGlobalButton;
    private StackMonitorWindow stackMonitorWindow;

    /**
     * Creates new form WIndow
     */
    public WIndow() {
        clientConnection = new ClientConnection();
        initComponents();
        setupMenuActions();
        setupCommandInterface();
        setupRealTimeUpdates();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        textField1 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jEditorPane1.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        jEditorPane1.setForeground(new java.awt.Color(102, 102, 102));
        jEditorPane1.setToolTipText("The text field to write in");
        jScrollPane1.setViewportView(jEditorPane1);

        // Create code editor panel for center
        javax.swing.JPanel centerPanel = new javax.swing.JPanel();
        centerPanel.setLayout(new java.awt.BorderLayout());
        
        // Code editor
        codeEditor = new javax.swing.JTextArea();
        codeEditor.setFont(new java.awt.Font("Monospaced", 0, 12));
        codeEditor.setTabSize(4);
        codeEditor.setBorder(javax.swing.BorderFactory.createTitledBorder("PlanetLang Code"));
        javax.swing.JScrollPane codeScrollPane = new javax.swing.JScrollPane(codeEditor);
        centerPanel.add(codeScrollPane, java.awt.BorderLayout.CENTER);
        
        // Button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel();
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER));
        
        javax.swing.JButton shareCodeButton = new javax.swing.JButton("Share Code");
        shareCodeButton.addActionListener(e -> shareCodeToChat());
        buttonPanel.add(shareCodeButton);
        
        executeLocalButton = new javax.swing.JButton("Execute Local");
        executeLocalButton.addActionListener(e -> executeCodeLocal());
        buttonPanel.add(executeLocalButton);
        
        executeGlobalButton = new javax.swing.JButton("Execute Global");
        executeGlobalButton.addActionListener(e -> executeCodeGlobal());
        buttonPanel.add(executeGlobalButton);
        
        centerPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        jScrollPane1.setViewportView(centerPanel);

        jScrollPane2.setViewportView(jTree1);

        chatArea = jTextPane1;
        chatArea.setEditable(false);
        chatArea.setFont(new java.awt.Font("Dialog", 0, 12));
        chatArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Chat"));
        
        // Add context menu to chat area for loading code
        javax.swing.JPopupMenu chatPopup = new javax.swing.JPopupMenu();
        javax.swing.JMenuItem loadCodeItem = new javax.swing.JMenuItem("Load Code to Editor");
        loadCodeItem.addActionListener(e -> loadCodeFromChat());
        chatPopup.add(loadCodeItem);
        chatArea.setComponentPopupMenu(chatPopup);
        
        jScrollPane3.setViewportView(chatArea);

        chatInputField = new javax.swing.JTextField();
        chatInputField.setText("");
        chatInputField.addActionListener(e -> sendChatMessage());
        textField1 = chatInputField;

        jMenu1.setText("Home");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Connection");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Window");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Connection");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void setupMenuActions() {
        // Add action listeners to connection menus
        javax.swing.JMenuItem connectItem = new javax.swing.JMenuItem("Connect to Server");
        connectItem.addActionListener(e -> connectToServer());
        jMenu2.add(connectItem);
        
        javax.swing.JMenuItem disconnectItem = new javax.swing.JMenuItem("Disconnect");
        disconnectItem.addActionListener(e -> disconnectFromServer());
        jMenu2.add(disconnectItem);
        
        // Add stack monitor menu item
        javax.swing.JMenuItem stackMonitorItem = new javax.swing.JMenuItem("Open Stack Monitor");
        stackMonitorItem.addActionListener(e -> openStackMonitor());
        jMenu3.add(stackMonitorItem);
        
        // Duplicate for the second connection menu
        javax.swing.JMenuItem connectItem2 = new javax.swing.JMenuItem("Connect to Server");
        connectItem2.addActionListener(e -> connectToServer());
        jMenu4.add(connectItem2);
        
        javax.swing.JMenuItem disconnectItem2 = new javax.swing.JMenuItem("Disconnect");
        disconnectItem2.addActionListener(e -> disconnectFromServer());
        jMenu4.add(disconnectItem2);
    }
    
    private void setupCommandInterface() {
        // Create command input panel
        javax.swing.JPanel commandPanel = new javax.swing.JPanel();
        commandPanel.setLayout(new java.awt.BorderLayout());
        
        // Execution mode selector
        executionModeCombo = new javax.swing.JComboBox<>(new String[]{"Local", "Global"});
        commandPanel.add(executionModeCombo, java.awt.BorderLayout.WEST);
        
        // Command input field
        commandField = new javax.swing.JTextField();
        commandField.setDocument(new javax.swing.text.PlainDocument() {
            @Override
            public void insertString(int offs, String str, javax.swing.text.AttributeSet a) throws javax.swing.text.BadLocationException {
                if (str != null) {
                    str = str.replace("\n", "").replace("\r", "");
                }
                super.insertString(offs, str, a);
            }
        });
        commandField.addActionListener(e -> {
            executeCommand();
            commandField.setText(""); // Clear on Enter
        });
        commandPanel.add(commandField, java.awt.BorderLayout.CENTER);

        
        // Execute button
        javax.swing.JButton executeButton = new javax.swing.JButton("Execute");
        executeButton.addActionListener(e -> executeCommand());
        commandPanel.add(executeButton, java.awt.BorderLayout.EAST);
        
        // Share/Take buttons
        javax.swing.JPanel sharePanel = new javax.swing.JPanel();
        javax.swing.JButton shareButton = new javax.swing.JButton("Share to Global");
        shareButton.addActionListener(e -> shareToGlobal());
        sharePanel.add(shareButton);
        
        javax.swing.JButton takeButton = new javax.swing.JButton("Take from Global");
        takeButton.addActionListener(e -> takeFromGlobal());
        sharePanel.add(takeButton);
        
        // Stack display areas
        userStackArea = new javax.swing.JTextArea(5, 20);
        userStackArea.setEditable(false);
        userStackArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Your Stack"));
        
        globalStackArea = new javax.swing.JTextArea(5, 20);
        globalStackArea.setEditable(false);
        globalStackArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Global Stack"));
        
        globalMemoryArea = new javax.swing.JTextArea(3, 20);
        globalMemoryArea.setEditable(false);
        globalMemoryArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Global Memory"));
        
        // Add components to the bottom of the window
        javax.swing.JPanel bottomPanel = new javax.swing.JPanel();
        bottomPanel.setLayout(new java.awt.BorderLayout());
        bottomPanel.add(commandPanel, java.awt.BorderLayout.NORTH);
        bottomPanel.add(sharePanel, java.awt.BorderLayout.CENTER);
        
        javax.swing.JPanel stackPanel = new javax.swing.JPanel();
        stackPanel.setLayout(new java.awt.GridLayout(1, 3));
        stackPanel.add(new javax.swing.JScrollPane(userStackArea));
        stackPanel.add(new javax.swing.JScrollPane(globalStackArea));
        stackPanel.add(new javax.swing.JScrollPane(globalMemoryArea));
        
        bottomPanel.add(stackPanel, java.awt.BorderLayout.SOUTH);
        
        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);
        pack();
    }
    
    private void setupRealTimeUpdates() {
        updateTimer = new javax.swing.Timer(300, e -> updateDisplays());
        updateTimer.setRepeats(true);
    }
    
    private void executeCommand() {
        if (!connected) {
            javax.swing.JOptionPane.showMessageDialog(this, "Not connected to server!");
            return;
        }
        
        String command = commandField.getText().trim();
        if (command.isEmpty()) return;
        
        String mode = (String) executionModeCombo.getSelectedItem();
        String result;
        
        if ("Local".equals(mode)) {
            result = clientConnection.executeLocal(command);
        } else {
            result = clientConnection.executeGlobal(command);
        }
        
        if (!result.startsWith("OK")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Command failed: " + result, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        
        commandField.setText("");
        updateDisplays();
    }
    
    private void shareToGlobal() {
        if (!connected) {
            javax.swing.JOptionPane.showMessageDialog(this, "Not connected to server!");
            return;
        }
        
        String result = clientConnection.shareToGlobal();
        if (!result.startsWith("OK")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Share failed: " + result, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        updateDisplays();
    }
    
    private void takeFromGlobal() {
        if (!connected) {
            javax.swing.JOptionPane.showMessageDialog(this, "Not connected to server!");
            return;
        }
        
        String result = clientConnection.takeFromGlobal();
        if (!result.startsWith("OK")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Take failed: " + result, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        updateDisplays();
    }
    
    private void sendChatMessage() {
        if (!connected) {
            javax.swing.JOptionPane.showMessageDialog(this, "Not connected to server!");
            return;
        }
        
        String message = chatInputField.getText().trim();
        if (message.isEmpty()) return;
        
        String result = clientConnection.sendChatMessage(message);
        if (!result.startsWith("OK")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Failed to send chat message: " + result, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {
            chatInputField.setText("");
            updateChat();
        }
    }
    
    private void executeCodeLocal() {
        if (!connected) {
            javax.swing.JOptionPane.showMessageDialog(this, "Not connected to server!");
            return;
        }
        
        String code = codeEditor.getText().trim();
        if (code.isEmpty()) return;
        
        String result = clientConnection.executeLocal(code);
        if (!result.startsWith("OK")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Code execution failed: " + result, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        updateDisplays();
    }
    
    private void executeCodeGlobal() {
        if (!connected) {
            javax.swing.JOptionPane.showMessageDialog(this, "Not connected to server!");
            return;
        }
        
        String code = codeEditor.getText().trim();
        if (code.isEmpty()) return;
        
        String result = clientConnection.executeGlobal(code);
        if (!result.startsWith("OK")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Code execution failed: " + result, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        updateDisplays();
    }
    
    private void shareCodeToChat() {
        if (!connected) {
            javax.swing.JOptionPane.showMessageDialog(this, "Not connected to server!");
            return;
        }
        
        String code = codeEditor.getText().trim();
        if (code.isEmpty()) return;
        
        // Format code as a special chat message
        String message = "[CODE]\n" + code + "\n[/CODE]";
        String result = clientConnection.sendChatMessage(message);
        if (!result.startsWith("OK")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Failed to share code: " + result, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {
            updateChat();
        }
    }
    
    private void loadCodeFromChat() {
        String selectedText = chatArea.getSelectedText();
        if (selectedText == null || selectedText.trim().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select code text in the chat to load.");
            return;
        }
        
        // Try to extract code from markdown-style code blocks
        String code = selectedText;
        if (code.contains("```")) {
            // Extract content between code blocks
            int start = code.indexOf("```");
            if (start != -1) {
                start = code.indexOf("\n", start);
                if (start != -1) {
                    int end = code.indexOf("```", start);
                    if (end != -1) {
                        code = code.substring(start + 1, end).trim();
                    }
                }
            }
        }
        
        codeEditor.setText(code);
    }
    
    private void openStackMonitor() {
        if (stackMonitorWindow == null || !stackMonitorWindow.isDisplayable()) {
            stackMonitorWindow = new StackMonitorWindow(clientConnection);
            stackMonitorWindow.setConnected(connected);
        }
        stackMonitorWindow.setVisible(true);
        stackMonitorWindow.toFront();
    }
    
    private void updateDisplays() {
        if (!connected) return;
        
        try {
            userStackArea.setText(clientConnection.getUserStack());
            globalStackArea.setText(clientConnection.getGlobalStack());
            globalMemoryArea.setText(clientConnection.getGlobalMemory());
            updateChat();
        } catch (Exception e) {
            System.err.println("Failed to update displays: " + e.getMessage());
        }
    }
    
    private void updateChat() {
        if (!connected) return;
        
        try {
            String chatMessages = clientConnection.getChatMessages();
            if (chatMessages != null && !chatMessages.isEmpty()) {
                // Format code blocks in chat
                chatMessages = chatMessages.replace("[CODE]\n", "```\n");
                chatMessages = chatMessages.replace("\n[/CODE]", "\n```");
                chatArea.setText(chatMessages);
                // Auto-scroll to bottom
                chatArea.setCaretPosition(chatArea.getDocument().getLength());
            }
        } catch (Exception e) {
            System.err.println("Failed to update chat: " + e.getMessage());
        }
    }
    
    private void connectToServer() {
        if (connected) {
            javax.swing.JOptionPane.showMessageDialog(this, "Already connected to server!");
            return;
        }
        
        String host = javax.swing.JOptionPane.showInputDialog(this, "Enter server host:", "localhost");
        if (host == null || host.trim().isEmpty()) return;
        
        String portStr = javax.swing.JOptionPane.showInputDialog(this, "Enter server port:", "8000");
        if (portStr == null || portStr.trim().isEmpty()) return;
        
        try {
            int port = Integer.parseInt(portStr.trim());
            if (clientConnection.connect(host.trim(), port)) {
                connected = true;
                setTitle("PlanetLang Client - Connected to " + host + ":" + port);
                updateTimer.start();
                updateDisplays();
                
                // Update stack monitor if it's open
                if (stackMonitorWindow != null && stackMonitorWindow.isDisplayable()) {
                    stackMonitorWindow.setConnected(true);
                }
                
                javax.swing.JOptionPane.showMessageDialog(this, "Successfully connected to server!");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to connect to server!", "Connection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid port number!", "Input Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void disconnectFromServer() {
        if (!connected) {
            javax.swing.JOptionPane.showMessageDialog(this, "Not connected to server!");
            return;
        }
        
        clientConnection.disconnect();
        connected = false;
        updateTimer.stop();
        userStackArea.setText("");
        globalStackArea.setText("");
        globalMemoryArea.setText("");
        setTitle("PlanetLang Client");
        
        // Update stack monitor if it's open
        if (stackMonitorWindow != null && stackMonitorWindow.isDisplayable()) {
            stackMonitorWindow.setConnected(false);
        }
        
        javax.swing.JOptionPane.showMessageDialog(this, "Disconnected from server!");
    }
    
    


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new WIndow().setVisible(true));
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextField textField1;
    // End of variables declaration//GEN-END:variables
}
